(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{322:function(t,e,a){t.exports=a.p+"assets/img/lpc.bfa9cf23.png"},323:function(t,e,a){t.exports=a.p+"assets/img/pci0.4477f361.png"},398:function(t,e,a){t.exports=a.p+"assets/img/ACPI000E.f11d4625.png"},399:function(t,e,a){t.exports=a.p+"assets/img/PNP0B00.cd0c5876.png"},400:function(t,e,a){t.exports=a.p+"assets/img/ssdt-before.b9b19f9b.png"},401:function(t,e,a){t.exports=a.p+"assets/img/ssdt-after.3d0ae705.png"},466:function(t,e,a){"use strict";a.r(e);var s=a(27),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"fixing-system-clocks-manual"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fixing-system-clocks-manual"}},[t._v("#")]),t._v(" Fixing System Clocks: Manual")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#determining-which-ssdt-you-need"}},[t._v("Determining which SSDT you need")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#rtc0-method"}},[t._v("RTC0 Method")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#finding-the-acpi-path"}},[t._v("Finding the ACPI path")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#edits-to-the-sample-ssdt"}},[t._v("Edits to the sample SSDT")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#compiling-the-ssdt"}},[t._v("Compiling the SSDT")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#wrapping-up"}},[t._v("Wrapping up")])])]),t._v(" "),s("h2",{attrs:{id:"determining-which-ssdt-you-need"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#determining-which-ssdt-you-need"}},[t._v("#")]),t._v(" Determining which SSDT you need")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Note")]),t._v(": X99 and X299 see "),s("RouterLink",{attrs:{to:"/Universal/awac-methods/manual-hedt.html"}},[t._v("here")])],1)]),t._v(" "),s("p",[t._v("Finding which SSDT you need is quite easy actually, first open your decompiled DSDT you got from "),s("RouterLink",{attrs:{to:"/Manual/dump.html"}},[t._v("Dumping the DSDT")]),t._v(" and "),s("RouterLink",{attrs:{to:"/Manual/compile.html"}},[t._v("Decompiling and Compiling")]),t._v(" with either MaciASL(if in macOS) or any other text editor if in Windows or Linux(VSCode has an "),s("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=Thog.vscode-asl",target:"_blank",rel:"noopener noreferrer"}},[t._v("ACPI extension"),s("OutboundLink")],1),t._v(" that can also help).")],1),t._v(" "),s("p",[t._v("Next search for "),s("code",[t._v("ACPI000E")]),t._v(". You should get something similar:")]),t._v(" "),s("p",[s("img",{attrs:{src:a(398),alt:""}})]),t._v(" "),s("p",[t._v("The above tells us a few things:")]),t._v(" "),s("ul",[s("li",[t._v("We in fact do have an AWAC clock\n"),s("ul",[s("li",[t._v("If nothing shows up, you don't need to do anything for AWAC or RTC")])])]),t._v(" "),s("li",[t._v("It can be easily disabled with STAS(if not, you can skip to here: "),s("a",{attrs:{href:"#rtc0-method"}},[t._v("RTC0 Method")]),t._v(")\n"),s("ul",[s("li",[s("code",[t._v("_STA")]),t._v(" is the device status, with "),s("code",[t._v("Zero")]),t._v(" meaning it won't show up")])])])]),t._v(" "),s("p",[t._v("But to double check, next search for "),s("code",[t._v("PNP0B00")]),t._v(":")]),t._v(" "),s("p",[s("img",{attrs:{src:a(399),alt:""}})]),t._v(" "),s("p",[t._v("And looks at that, we can in fact disable our AWAC and enable the RTC! If not skip to here: "),s("a",{attrs:{href:"#rtc0-method"}},[t._v("RTC0 Method")])]),t._v(" "),s("p",[t._v("Now it's as simple as grabbing "),s("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-AWAC-DISABLE.dsl",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-AWAC.dsl"),s("OutboundLink")],1),t._v(" and "),s("a",{attrs:{href:"#compiling-the-ssdt"}},[t._v("compile")]),t._v(", no changes needed You can also use the below SSDT to the same effect:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/dortania/Getting-Started-With-ACPI/blob/master/extra-files/compiled/SSDT-AWAC.aml",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-AWAC.aml"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"rtc0-method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rtc0-method"}},[t._v("#")]),t._v(" RTC0 Method")]),t._v(" "),s("p",[t._v("This method is for those who either don't have a "),s("code",[t._v("PNP0B00")]),t._v(" device to re-enable or have no easy way(via STAS variable).")]),t._v(" "),s("h3",{attrs:{id:"finding-the-acpi-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#finding-the-acpi-path"}},[t._v("#")]),t._v(" Finding the ACPI path")]),t._v(" "),s("p",[t._v("Assuming you've gotten your DSDT already opened from earlier, search for the following:")]),t._v(" "),s("ul",[s("li",[t._v("Finding the LowPinCount path:\n"),s("ul",[s("li",[t._v("Search "),s("code",[t._v("Name (_ADR, 0x001F0000)")])])])]),t._v(" "),s("li",[t._v("Finding the PCI path:\n"),s("ul",[s("li",[t._v("Search "),s("code",[t._v("PNP0A08")]),t._v(" (If multiple show up, use the first one)")])])])]),t._v(" "),s("p",[t._v("You should get something like the following show up:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("LPC Pathing")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("PCI Pathing")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:a(322),alt:""}})]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:a(323),alt:""}})])])])]),t._v(" "),s("p",[t._v("From the above, we can see we have both "),s("code",[t._v("PCI0")]),t._v(" and "),s("code",[t._v("LPC")]),t._v(". Now we can head to the next stage")]),t._v(" "),s("h3",{attrs:{id:"edits-to-the-sample-ssdt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#edits-to-the-sample-ssdt"}},[t._v("#")]),t._v(" Edits to the sample SSDT")]),t._v(" "),s("p",[t._v("Now that we have our ACPI path, lets grab our SSDT and get to work:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-RTC0.dsl",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-RTC0.dsl"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("By default, this uses "),s("code",[t._v("PCI0.LPCB")]),t._v(" for the pathing. you'll want to rename accordingly.")]),t._v(" "),s("p",[t._v("Following the example from above, we'll be renaming it to "),s("code",[t._v("PCI0.LPC")]),t._v(":")]),t._v(" "),s("p",[s("strong",[t._v("Before")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("External (_SB_.PCI0.LPCB, DeviceObj) <- Rename this\n\nScope (_SB.PCI0.LPCB) <- Rename this\n")])])]),s("p",[s("img",{attrs:{src:a(400),alt:""}})]),t._v(" "),s("p",[t._v("Following the example pathing we found, the SSDT should look something like this:")]),t._v(" "),s("p",[s("strong",[t._v("After")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("External (_SB_.PCI0.LPC, DeviceObj) <- Renamed\n\nScope (_SB.PCI0.LPC) <- Renamed\n")])])]),s("p",[s("img",{attrs:{src:a(401),alt:""}})]),t._v(" "),s("h3",{attrs:{id:"compiling-the-ssdt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compiling-the-ssdt"}},[t._v("#")]),t._v(" Compiling the SSDT")]),t._v(" "),s("p",[t._v("With the SSDT done, you're now "),s("RouterLink",{attrs:{to:"/Manual/compile.html"}},[t._v("ready to compile the SSDT!")])],1),t._v(" "),s("h2",{attrs:{id:"wrapping-up"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wrapping-up"}},[t._v("#")]),t._v(" Wrapping up")]),t._v(" "),s("p",[t._v("Once you're done making your SSDT, either head to the next page to finish the rest of the SSDTs or head here if you're ready to wrap up:")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/cleanup.html"}},[s("strong",[t._v("Cleanup")])])],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);