(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{423:function(t,e,a){t.exports=a.p+"assets/img/rhub-path.0ccecac7.png"},424:function(t,e,a){t.exports=a.p+"assets/img/ssdt-before.7335c7c6.png"},425:function(t,e,a){t.exports=a.p+"assets/img/ssdt-after.9cd83504.png"},494:function(t,e,a){"use strict";a.r(e);var s=a(28),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"fixing-usb-manual"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fixing-usb-manual"}},[t._v("#")]),t._v(" Fixing USB: Manual")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#finding-the-acpi-path"}},[t._v("Finding the ACPI path")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#edits-to-the-sample-ssdt"}},[t._v("Edits to the sample SSDT")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#compiling-the-ssdt"}},[t._v("Compiling the SSDT")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#wrapping-up"}},[t._v("Wrapping up")])])]),t._v(" "),s("h2",{attrs:{id:"finding-the-acpi-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#finding-the-acpi-path"}},[t._v("#")]),t._v(" Finding the ACPI path")]),t._v(" "),s("p",[t._v("Finding the ACPI pathing is quite easy actually, first open your decompiled DSDT you got from "),s("RouterLink",{attrs:{to:"/Manual/dump.html"}},[t._v("Dumping the DSDT")]),t._v(" and "),s("RouterLink",{attrs:{to:"/Manual/compile.html"}},[t._v("Decompiling and Compiling")]),t._v(" with either MaciASL(if in macOS) or any other text editor if in Windows or Linux(VSCode has an "),s("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=Thog.vscode-asl",target:"_blank",rel:"noopener noreferrer"}},[t._v("ACPI extension"),s("OutboundLink")],1),t._v(" that can also help).")],1),t._v(" "),s("p",[t._v("Next, search for the "),s("code",[t._v("Device (RHUB)")])]),t._v(" "),s("p",[t._v("You should get something like the following show up:")]),t._v(" "),s("p",[s("img",{attrs:{src:a(423),alt:""}})]),t._v(" "),s("p",[t._v("From the above, we can see that the full ACPI pathing for RHUB is "),s("code",[t._v("PCI0.XHC.RHUB")]),t._v(". If it's not as clear you can search for what those device paths are for your system:")]),t._v(" "),s("ul",[s("li",[t._v("Finding the PCI path:\n"),s("ul",[s("li",[t._v("Search "),s("code",[t._v("PNP0A08")]),t._v(" (If multiple show up, use the first one)")])])]),t._v(" "),s("li",[t._v("Finding XHCI path\n"),s("ul",[s("li",[t._v("Search for "),s("code",[t._v("XHC")]),t._v(", "),s("code",[t._v("XHCI")]),t._v(" and "),s("code",[t._v("XHC1")]),t._v(", and yours is whichever shows up.")])])])]),t._v(" "),s("p",[t._v("Now with the pathing, you can head here: "),s("a",{attrs:{href:"#edits-to-the-sample-ssdt"}},[t._v("Edits to the sample SSDT")])]),t._v(" "),s("h2",{attrs:{id:"edits-to-the-sample-ssdt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#edits-to-the-sample-ssdt"}},[t._v("#")]),t._v(" Edits to the sample SSDT")]),t._v(" "),s("p",[t._v("Now that we have our ACPI path, lets grab our SSDT and get to work:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/dortania/Getting-Started-With-ACPI/blob/master/extra-files/decompiled/SSDT-RHUB.dsl",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-RHUB.dsl"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("By default, this uses "),s("code",[t._v("PCI0.XHC1.RHUB")]),t._v(" for the pathing. you'll want to rename accordingly.")]),t._v(" "),s("p",[t._v("Following the example from above, we'll be renaming it to "),s("code",[t._v("PCI0.XHC.RHUB")]),t._v(":")]),t._v(" "),s("p",[s("strong",[t._v("Before")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("External (_SB_.PCI0.XHC1.RHUB, DeviceObj) <- Rename this\n\nScope (_SB.PCI0.XHC1.RHUB) <- Rename this\n")])])]),s("p",[s("img",{attrs:{src:a(424),alt:""}})]),t._v(" "),s("p",[t._v("Following the example pathing we found, the SSDT should look something like this:")]),t._v(" "),s("p",[s("strong",[t._v("After")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("External (_SB.PCI0.XHC.RHUB, DeviceObj) <- Renamed\n\nScope (_SB.PCI0.XHC.RHUB) <- Renamed\n")])])]),s("p",[s("img",{attrs:{src:a(425),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"compiling-the-ssdt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compiling-the-ssdt"}},[t._v("#")]),t._v(" Compiling the SSDT")]),t._v(" "),s("p",[t._v("With the SSDT done, you're now "),s("RouterLink",{attrs:{to:"/Manual/compile.html"}},[t._v("ready to compile the SSDT!")])],1),t._v(" "),s("h2",{attrs:{id:"wrapping-up"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wrapping-up"}},[t._v("#")]),t._v(" Wrapping up")]),t._v(" "),s("p",[t._v("Once you're done making your SSDT, either head to the next page to finish the rest of the SSDTs or head here if you're ready to wrap up:")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/cleanup.html"}},[s("strong",[t._v("Cleanup")])])],1)])])}),[],!1,null,null,null);e.default=i.exports}}]);